@page "/weather"
@using AspireAppWithAutomation.ApiService.Client.Features.Weather.Models
@using AspireAppWithAutomation.ApiService.Client
@attribute [StreamRendering]
@attribute [OutputCache(Duration = 5)]

@inject ApiServiceHttpClient ApiService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (_forecasts == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>Date</th>
      <th>Temp. (C)</th>
      <th>Temp. (F)</th>
      <th>Summary</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var forecast in _forecasts)
    {
      <tr>
        <td>@forecast.Date.ToShortDateString()</td>
        <td>@forecast.TemperatureC</td>
        <td>@forecast.TemperatureF</td>
        <td>@forecast.Summary</td>
      </tr>
    }
    </tbody>
  </table>
}

@code {
  
  private WeatherForecast[]? _forecasts;

  protected override async Task OnInitializedAsync()
  {
    var response = await ApiService.GetWeatherAsync();
    _forecasts = response?.Forecasts ?? Array.Empty<WeatherForecast>();
  }

}